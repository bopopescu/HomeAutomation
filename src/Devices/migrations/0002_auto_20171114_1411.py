# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-11-14 13:11
from __future__ import unicode_literals

import Devices.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('Devices', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalogItemModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DBTag', models.CharField(blank=True, editable=False, max_length=33, null=True)),
                ('HumanTag', models.CharField(max_length=20, unique=True)),
                ('DataType', models.CharField(choices=[('INTEGER', 'Integer'), ('FLOAT', 'Float')], max_length=10)),
                ('Units', models.CharField(max_length=10)),
            ],
            options={
                'verbose_name_plural': 'Analog fields',
                'verbose_name': 'Analog field',
            },
        ),
        migrations.CreateModel(
            name='CommandModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Identifier', models.CharField(max_length=10)),
                ('HumanTag', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name_plural': 'Commands',
                'verbose_name': 'Command',
            },
        ),
        migrations.CreateModel(
            name='DatagramModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Identifier', models.CharField(max_length=20)),
                ('Code', models.PositiveSmallIntegerField(help_text='Identifier byte-type code')),
                ('Type', models.CharField(choices=[('Synchronous', 'Synchronous'), ('Asynchronous', 'Asynchronous')], max_length=12)),
            ],
            options={
                'verbose_name_plural': 'Datagrams',
                'verbose_name': 'Datagram',
            },
        ),
        migrations.CreateModel(
            name='DigitalItemModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DBTag', models.CharField(blank=True, editable=False, max_length=25, null=True)),
                ('HumanTag', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Digital fields',
                'verbose_name': 'Digital field',
            },
        ),
        migrations.CreateModel(
            name='ItemOrdering',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveSmallIntegerField(help_text='Position in the dataframe 1-based')),
                ('AnItem', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Devices.AnalogItemModel')),
                ('DgItem', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Devices.DigitalItemModel')),
                ('datagram', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Devices.DatagramModel')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name_plural': 'Items',
                'verbose_name': 'Item',
            },
        ),
        migrations.CreateModel(
            name='ReportItems',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fromDate', models.DateTimeField(blank=True, editable=False, null=True)),
                ('toDate', models.DateTimeField(blank=True, editable=False, null=True)),
                ('data', models.CharField(blank=True, help_text='Data of the report in JSON format', max_length=20000, null=True)),
            ],
            options={
                'ordering': ('fromDate',),
                'verbose_name_plural': 'Generated reports',
                'verbose_name': 'Generated report',
            },
        ),
        migrations.AlterModelOptions(
            name='devicetypemodel',
            options={'verbose_name': 'Device type', 'verbose_name_plural': 'Device types'},
        ),
        migrations.AlterModelOptions(
            name='reportmodel',
            options={'permissions': (('add_report', 'Can configure and add reports'), ('view_report', 'Can view reports configured'), ('view_plots', 'Can see the historic plots from any device')), 'verbose_name': 'Report', 'verbose_name_plural': 'Reports'},
        ),
        migrations.RenameField(
            model_name='devicetypemodel',
            old_name='DeviceType',
            new_name='Code',
        ),
        migrations.AddField(
            model_name='devicetypemodel',
            name='Connection',
            field=models.CharField(choices=[('LOCAL', 'LOCAL'), ('REMOTE', 'REMOTE')], default='LOCAL', help_text='Connection of the device', max_length=15),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='devicetypemodel',
            name='Picture',
            field=models.ImageField(blank=True, null=True, upload_to=Devices.models.path_file_name, verbose_name='DeviceType picture'),
        ),
        migrations.AddField(
            model_name='reportmodel',
            name='DataAggregation',
            field=models.PositiveSmallIntegerField(choices=[(0, 'No aggregation'), (1, 'Hourly'), (2, 'Daily'), (4, 'Monthly')], default=0, help_text='Data directly from the DB or averaged over a period'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='reportmodel',
            name='Periodicity',
            field=models.PositiveSmallIntegerField(choices=[(2, 'Every day'), (3, 'Every week'), (4, 'Every month')], default=2, help_text='How often the report will be generated'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='reportmodel',
            name='ReportTitle',
            field=models.CharField(error_messages={'unique': 'Invalid report title - This title already exists in the DB.'}, max_length=50, unique=True),
        ),
        migrations.AddField(
            model_name='reportitems',
            name='Report',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Devices.ReportModel'),
        ),
        migrations.AddField(
            model_name='datagrammodel',
            name='AnItems',
            field=models.ManyToManyField(blank=True, through='Devices.ItemOrdering', to='Devices.AnalogItemModel'),
        ),
        migrations.AddField(
            model_name='datagrammodel',
            name='DeviceType',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Devices.DeviceTypeModel'),
        ),
        migrations.AddField(
            model_name='datagrammodel',
            name='DgItems',
            field=models.ManyToManyField(blank=True, through='Devices.ItemOrdering', to='Devices.DigitalItemModel'),
        ),
        migrations.AddField(
            model_name='commandmodel',
            name='DeviceType',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Devices.DeviceTypeModel'),
        ),
        migrations.AlterUniqueTogether(
            name='reportitems',
            unique_together=set([('Report', 'fromDate', 'toDate')]),
        ),
        migrations.AlterUniqueTogether(
            name='itemordering',
            unique_together=set([('order', 'datagram')]),
        ),
        migrations.AlterUniqueTogether(
            name='datagrammodel',
            unique_together=set([('DeviceType', 'Identifier'), ('DeviceType', 'Code')]),
        ),
        migrations.AlterUniqueTogether(
            name='commandmodel',
            unique_together=set([('DeviceType', 'Identifier')]),
        ),
    ]
