# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-08-31 08:13
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Master_GPIOs', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceModel',
            fields=[
                ('DeviceName', models.CharField(error_messages={'unique': 'Invalid device name - This name already exists in the DB.'}, help_text='Name for the device', max_length=20, unique=True)),
                ('IO', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='Master_GPIOs.IOmodel')),
                ('DeviceType', models.CharField(choices=[('STOPPED', 'STOPPED'), ('RUNNING', 'RUNNING')], help_text='State of the device', max_length=15)),
                ('DeviceState', models.CharField(choices=[('STOPPED', 'STOPPED'), ('RUNNING', 'RUNNING')], help_text='State of the device', max_length=15)),
                ('Sampletime', models.PositiveIntegerField(default=600)),
                ('LastUpdated', models.DateTimeField(blank=True, help_text='Datetime of the last data', null=True)),
                ('Connected', models.BooleanField(default=False)),
            ],
            options={
                'permissions': (('view_devices', 'Can see available devices'), ('change_state', 'Can change the state of the devices'), ('add_device', 'Can add new devices to the installation')),
            },
        ),
        migrations.CreateModel(
            name='DeviceTypeModel',
            fields=[
                ('DeviceType', models.CharField(help_text='Type of the device', max_length=10, primary_key=True, serialize=False)),
                ('Description', models.CharField(help_text='Description of the device', max_length=50)),
                ('MinSampletime', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(5)])),
            ],
        ),
    ]
